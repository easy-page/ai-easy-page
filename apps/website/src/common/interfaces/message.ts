export type PartUnion = Part | string;
export type PartListUnion = PartUnion[] | PartUnion;

export interface Part {
	/** Metadata for a given video. */
	videoMetadata?: VideoMetadata;
	/** Indicates if the part is thought from the model. */
	thought?: boolean;
	/** Optional. Inlined bytes data. */
	inlineData?: Blob_2;
	/** Optional. URI based data. */
	fileData?: FileData;
	/** An opaque signature for the thought so it can be reused in subsequent requests.
	 * @remarks Encoded as base64 string. */
	thoughtSignature?: string;
	/** Optional. Result of executing the [ExecutableCode]. */
	codeExecutionResult?: CodeExecutionResult;
	/** Optional. Code generated by the model that is meant to be executed. */
	executableCode?: ExecutableCode;
	/** Optional. A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] with the parameters and their values. */
	functionCall?: FunctionCall;
	/** Optional. The result output of a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function call. It is used as context to the model. */
	functionResponse?: FunctionResponse;
	/** Optional. Text part (can be code). */
	text?: string;
}

/** Content interface for multimodal input. */
export interface Content {
	/** Ordered `Parts` that constitute a single message. Parts may have different
	 * IANA MIME types.
	 */
	parts?: Part[];
	/** Optional. The producer of the content. Must be either 'user' or 'model'.
	 *
	 * Useful to set for multi-turn conversations, otherwise can be left blank
	 * or unset.
	 */
	role?: string;
}

/** URI based data. */
export interface FileData {
	/** Optional. Display name of the file data. Used to provide a label or filename to distinguish file datas. It is not currently used in the Gemini GenerateContent calls. */
	displayName?: string;
	/** Required. URI. */
	fileUri?: string;
	/** Required. The IANA standard MIME type of the source data. */
	mimeType?: string;
}

export enum FunctionResponseScheduling {
	/**
	 * This value is unused.
	 */
	SCHEDULING_UNSPECIFIED = 'SCHEDULING_UNSPECIFIED',
	/**
	 * Only add the result to the conversation context, do not interrupt or trigger generation.
	 */
	SILENT = 'SILENT',
	/**
	 * Add the result to the conversation context, and prompt to generate output without interrupting ongoing generation.
	 */
	WHEN_IDLE = 'WHEN_IDLE',
	/**
	 * Add the result to the conversation context, interrupt ongoing generation and prompt to generate output.
	 */
	INTERRUPT = 'INTERRUPT',
}

/** The result output from a `FunctionCall`. */
export class FunctionResponse {
	/** Signals that function call continues, and more responses will be returned, turning the function call into a generator. Is only applicable to NON_BLOCKING function calls (see FunctionDeclaration.behavior for details), ignored otherwise. If false, the default, future responses will not be considered. Is only applicable to NON_BLOCKING function calls, is ignored otherwise. If set to false, future responses will not be considered. It is allowed to return empty `response` with `will_continue=False` to signal that the function call is finished. */
	willContinue?: boolean;
	/** Specifies how the response should be scheduled in the conversation. Only applicable to NON_BLOCKING function calls, is ignored otherwise. Defaults to WHEN_IDLE. */
	scheduling?: FunctionResponseScheduling;
	/** Optional. The id of the function call this response is for. Populated by the client to match the corresponding function call `id`. */
	id?: string;
	/** Required. The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name]. */
	name?: string;
	/** Required. The function response in JSON object format. Use "output" key to specify function output and "error" key to specify error details (if any). If "output" and "error" keys are not specified, then whole "response" is treated as function output. */
	response?: Record<string, unknown>;
}
/** A predicted `FunctionCall` returned from the model. */
export interface FunctionCall {
	/** The unique id of the function call. If populated, the client to execute the
	 `function_call` and return the response with the matching `id`. */
	id?: string;
	/** Optional. The function parameters and values in JSON object format. See [FunctionDeclaration.parameters] for parameter details. */
	args?: Record<string, unknown>;
	/** Required. The name of the function to call. Matches [FunctionDeclaration.name]. */
	name?: string;
}

/** Code generated by the model that is meant to be executed. */
export interface ExecutableCode {
	/** Required. The code to be executed. */
	code?: string;
	/** Required. Programming language of the `code`. */
	language?: Language;
}

export enum Language {
	/**
	 * Unspecified language. This value should not be used.
	 */
	LANGUAGE_UNSPECIFIED = 'LANGUAGE_UNSPECIFIED',
	/**
	 * Python >= 3.10, with numpy and simpy available.
	 */
	PYTHON = 'PYTHON',
}

/** Result of executing the `ExecutableCode`. */
export interface CodeExecutionResult {
	/** Required. Outcome of the code execution.
	 */
	outcome: string;
	/** Optional. Contains stdout when code execution is successful, stderr
	 * or other description otherwise.
	 */
	output?: string;
}

export interface VideoMetadata {
	/** The frame rate of the video sent to the model. If not specified, the
     default value will be 1.0. The fps range is (0.0, 24.0]. */
	fps?: number;
	/** Optional. The end offset of the video. */
	endOffset?: string;
	/** Optional. The start offset of the video. */
	startOffset?: string;
}

interface Blob_2 {
	/** Optional. Display name of the blob. Used to provide a label or filename to distinguish blobs. This field is not currently used in the Gemini GenerateContent calls. */
	displayName?: string;
	/** Required. Raw bytes.
	 * @remarks Encoded as base64 string. */
	data?: string;
	/** Required. The IANA standard MIME type of the source data. */
	mimeType?: string;
}
