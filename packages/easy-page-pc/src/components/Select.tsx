import React from 'react';
import { observer } from 'mobx-react';
import { Select as AntSelect, SelectProps as AntSelectProps } from 'antd';
import { FieldValue, useFormContext } from '@easy-page/core';

export interface SelectProps
	extends Omit<AntSelectProps, 'value' | 'onChange'> {
	value?: FieldValue;
	onChange?: (value: FieldValue) => void;
	remoteSearch?: boolean;
	onSearch?: (keyword: string) => Promise<any[]>;
}

export const Select: React.FC<SelectProps> = observer(
	({
		value,
		onChange,
		remoteSearch = false,
		onSearch,
		style,
		options = [],
		...props
	}: SelectProps) => {
		const { store } = useFormContext();

		// ‰ªé store Ëé∑ÂèñÂ≠óÊÆµÊï∞ÊçÆ‰Ωú‰∏∫ options
		const fieldData = store.getFieldData<any[]>(props.id as string);

		// Ë∞ÉËØïÊó•ÂøóÔºöÊ£ÄÊü•Â≠óÊÆµÊï∞ÊçÆ
		if (props.id === 'city') {
			console.log(`üéØ [Select ${props.id}] fieldData:`, fieldData);
			console.log(`üéØ [Select ${props.id}] fieldData.data:`, fieldData?.data);
		}

		// ËΩ¨Êç¢Êï∞ÊçÆÊ†ºÂºèÔºöÂ∞Ü { id, name } Ê†ºÂºèËΩ¨Êç¢‰∏∫ { label, value } Ê†ºÂºè
		const convertOptions = (data: any[]) => {
			return data.map((item) => {
				// Â¶ÇÊûúÂ∑≤ÁªèÊòØÊ≠£Á°ÆÁöÑÊ†ºÂºèÔºåÁõ¥Êé•ËøîÂõû
				if (item.label && item.value !== undefined) {
					return item;
				}
				// Â¶ÇÊûúÊòØ { id, name } Ê†ºÂºèÔºåËΩ¨Êç¢‰∏∫ { label, value }
				if (item.id !== undefined && item.name !== undefined) {
					return {
						label: item.name,
						value: item.id,
					};
				}
				// Â¶ÇÊûúÊòØ { value, label } Ê†ºÂºèÔºåÁõ¥Êé•ËøîÂõû
				if (item.value !== undefined && item.label !== undefined) {
					return item;
				}
				// ÂÖ∂‰ªñÊ†ºÂºèÔºåÂ∞ùËØï‰ΩøÁî® toString() ‰Ωú‰∏∫ label
				return {
					label: String(item),
					value: item,
				};
			});
		};

		const finalOptions =
			fieldData?.success &&
			Array.isArray(fieldData.data) &&
			fieldData.data.length > 0
				? convertOptions(fieldData.data)
				: Array.isArray(options)
				? convertOptions(options)
				: [];

		// Ë∞ÉËØïÊó•ÂøóÔºöÊ£ÄÊü•ÊúÄÁªàÈÄâÈ°π
		if (props.id === 'city') {
			console.log(`üéØ [Select ${props.id}] finalOptions:`, finalOptions);
			console.log(
				`üéØ [Select ${props.id}] finalOptions.length:`,
				finalOptions.length
			);
		}

		// Ë∞ÉËØïÊó•ÂøóÔºöÊ£ÄÊü•ÁºñËæëÊ®°Âºè‰∏ãÁöÑÈÄâÈ°πÂåπÈÖçÊÉÖÂÜµ
		if (value && finalOptions.length > 0) {
			const selectedOption = finalOptions.find(
				(option) => option.value === value
			);
			if (!selectedOption) {
				console.log(
					`üîç [Select ${props.id}] ÁºñËæëÊ®°ÂºèË≠¶ÂëäÔºöÂΩìÂâçÂÄº ${value} ‰∏çÂú®ÈÄâÈ°πÂàóË°®‰∏≠`
				);
			}
		}

		const handleChange = (val: any) => {
			onChange?.(val);
		};

		const handleSearch = async (keyword: string) => {
			if (remoteSearch && props.id && store) {
				// ‰ΩøÁî® store.dispatchFieldRequest ËøõË°åÊêúÁ¥¢
				await store.dispatchFieldRequest(props.id as string, { keyword });
			} else if (onSearch) {
				// Â¶ÇÊûúÊèê‰æõ‰∫ÜËá™ÂÆö‰πâÁöÑ onSearchÔºåÂàô‰ΩøÁî®ÂÆÉ
				await onSearch(keyword);
			}
		};

		// ËøáÊª§Êéâ props ‰∏≠ÁöÑ undefined ÂÄºÔºåÈÅøÂÖç Object.keys() ÈîôËØØ
		const filteredProps = Object.fromEntries(
			Object.entries(props).filter(([_, value]) => value !== undefined)
		);

		return (
			<AntSelect
				value={value}
				onChange={handleChange}
				onSearch={remoteSearch ? handleSearch : undefined}
				showSearch={remoteSearch}
				filterOption={!remoteSearch}
				options={finalOptions}
				style={style || { minWidth: 200 }}
				{...filteredProps}
			/>
		);
	}
);
